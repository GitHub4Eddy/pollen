{"name":"Pollen","type":"com.fibaro.genericDevice","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_783"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_783"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"interval","value":"1200"},{"name":"httpTimeout","value":"5"},{"name":"debugLevel","value":"1"},{"name":"apiKey","value":"1"},{"name":"icon","value":"0"},{"name":"latitude","value":"52"},{"name":"longitude","value":"5"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QuickApp POLLEN\n\n-- This QuickApp gives access to real-time pollen count - tree, grass and weed, of any location in Asia, Europe, North America, Australia and New Zealand by latitude and longitude. \n\n-- Pollen is a fine powder produced by trees and plants. \n-- Pollen can severely affect people, especially those with different ailments such as asthma and respiratory issues. \n-- It can aggravate these existing conditions or cause these issues in high risk groups.\n\n-- Grass Pollen:\tPollen grains from grasses. Measuring unit is pollen particles/m³\n-- Tree Pollen:\tPollen from trees such as Birch and Oak. Measuring unit is pollen particles/m³\n\n-- The QuickApp provides a risk evaluation with levels \n   -- Low - Mild risk to those with severe respiratory issues. No risk for the general public \n   -- Moderate - Risky for those with severe respiratory problems. Mild risk for the general public \n   -- High - Risky for all groups of people \n   -- Very High - Highly risky for all groups of people\n\n-- IMPORTANT\n-- You need an API key form https://www.getambee.com\n-- The API is free up to 100 API calls/day, with zero limitations on country, access to air quality, pollen, weather and fire data and dedicated support \n\n\n-- Version 0.3 (24th May 2021)\n-- Changed handling in case exhausted daily usage limit \n-- Some minor changes\n\n-- Version 0.1 (8th May 2021)\n-- Initial version\n\n\n-- Variables (mandatory): \n-- apiKey = Get your free API key from https://www.getambee.com\n-- interval = [number] in seconds time to get the data from the API\n-- timeout = [number] in seconds for http timeout\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n-- icon = [numbber] User defined icon number (add the icon via an other device and lookup the number)\n\n-- Example response:\n-- {\"message\": \"Success\",\"lat\": 52.10,\"lng\": 5.17,\"data\": [{\"Count\": {\"grass_pollen\": 23,\"tree_pollen\": 172,\"weed_pollen\": 1},\"Risk\": {\"grass_pollen\": \"Low\",\"tree_pollen\": \"Moderate\",\"weed_pollen\": \"Low\"},\"Species\": {\"Grass\": {\"Grass / Poaceae\": 23},\"Others\": 4,\"Tree\": {\"Alder\": 3,\"Birch\": 61,\"Cypress\": 6,\"Elm\": 1,\"Hazel\": 0,\"Oak\": 44,\"Pine\": 29,\"Plane\": 20,\"Poplar / Cottonwood\": 5},\"Weed\": {\"Chenopod\": 0,\"Mugwort\": 0,\"Nettle\": 0,\"Ragweed\": 0}},\"updatedAt\": \"2021-05-08T11:14:38.000Z\"}]}\n\n\n-- No editing of this code is needed \n\n\nclass 'CountGrassPollen'(QuickAppChild)\nfunction CountGrassPollen:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"CountGrassPollen initiated, deviceId:\",self.id)\nend\nfunction CountGrassPollen:updateValue(data) \n  --self:debug(\"CountGrassPollen: \",data.CountGrassPollen)\n  self:updateProperty(\"value\",tonumber(data.CountGrassPollen))\n  self:updateProperty(\"unit\", \"p/m³\")\n  self:updateProperty(\"log\", data.RiskGrassPollen ..\" risk\")\nend\n\nclass 'CountTreePollen'(QuickAppChild)\nfunction CountTreePollen:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"CountTreePollen initiated, deviceId:\",self.id)\nend\nfunction CountTreePollen:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.CountTreePollen)) \n  self:updateProperty(\"unit\", \"p/m³\")\n  self:updateProperty(\"log\", data.RiskTreePollen ..\" risk\")\nend\n\nclass 'CountWeedPollen'(QuickAppChild)\nfunction CountWeedPollen:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"CountWeedPollen initiated, deviceId:\",self.id)\nend\nfunction CountWeedPollen:updateValue(data) \n  self:updateProperty(\"value\",tonumber(data.CountWeedPollen)) \n  self:updateProperty(\"unit\", \"p/m³\")\n  self:updateProperty(\"log\", data.RiskWeedPollen ..\" risk\")\nend\n\n\n-- QuickApp functions\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:updateProperties() --Update properties\n  self:logging(3,\"updateProperties\")\n  self:updateProperty(\"log\", data.timestamp)\nend\n\n\nfunction QuickApp:updateLabels() -- Update labels\n  self:logging(3,\"updateLabels\")\n  local labelText = \"\"\n  if debugLevel == 4 then\n    labelText = labelText ..\"SIMULATION MODE\" ..\"\\n\\n\"\n  end\n  labelText = labelText ..\"Grass Pollen: \" ..data.CountGrassPollen ..\" p/m³ (\" ..data.RiskGrassPollen ..\" risk)\" ..\"\\n\"\n  labelText = labelText ..\"Tree Pollen:  \" ..data.CountTreePollen ..\" p/m³ (\" ..data.RiskTreePollen ..\" risk)\" ..\"\\n\"\n  labelText = labelText ..\"Weed Pollen: \" ..data.CountWeedPollen ..\" p/m³ (\" ..data.RiskWeedPollen ..\" risk)\" ..\"\\n\\n\"\n  labelText = labelText ..\"Grass: \" ..\"\\n\"\n  labelText = labelText ..\"Poaceae: \" ..data.SpeciesGrassPoaceae ..\" p/m³\" ..\"\\n\\n\"\n  labelText = labelText ..\"Tree: \" ..\"\\n\"\n  labelText = labelText ..\"Alder: \" ..data.SpeciesTreeAlder ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Birch: \" ..data.SpeciesTreeBirch ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Cypress: \" ..data.SpeciesTreeCypress ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Elm: \" ..data.SpeciesTreeElm ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Hazel: \" ..data.SpeciesTreeHazel ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Oak: \" ..data.SpeciesTreeOak ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Pine: \" ..data.SpeciesTreePine ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Plane: \" ..data.SpeciesTreePlane ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Poplar/Cottonwood: \" ..data.SpeciesTreePoplarCottonwood ..\" p/m³\" ..\"\\n\\n\"\n  labelText = labelText ..\"Weed: \" ..\"\\n\"\n  labelText = labelText ..\"Chenopod : \" ..data.SpeciesWeedChenopod ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Mugwort: \" ..data.SpeciesWeedMugwort ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Nettle: \" ..data.SpeciesWeedNettle ..\" p/m³\" ..\"\\n\"\n  labelText = labelText ..\"Ragweed: \" ..data.SpeciesWeedRagweed ..\" p/m³\" ..\"\\n\\n\"\n  labelText = labelText ..\"Others: \" ..data.SpeciesOthers ..\" p/m³\" ..\"\\n\\n\"\n  labelText = labelText ..\"LAT: \" ..latitude ..\" / \" ..\"LON: \" ..longitude ..\"\\n\"\n  labelText = labelText ..\"Measured: \" ..data.timestamp ..\"\\n\"\n  \n  self:logging(2,\"labelText: \" ..labelText)\n  self:updateView(\"label1\", \"text\", labelText) \nend\n\n\nfunction QuickApp:getValues() -- Get the values\n  self:logging(3,\"getValues\")\n  data.CountGrassPollen = jsonTable.data[1].Count.grass_pollen \n  data.CountTreePollen = jsonTable.data[1].Count.tree_pollen\n  data.CountWeedPollen = jsonTable.data[1].Count.weed_pollen\n  data.RiskGrassPollen = jsonTable.data[1].Risk.grass_pollen \n  data.RiskTreePollen = jsonTable.data[1].Risk.tree_pollen\n  data.RiskWeedPollen = jsonTable.data[1].Risk.weed_pollen\n  data.SpeciesGrassPoaceae = jsonTable.data[1].Species.Grass.GrassPoaceae\n  data.SpeciesTreeAlder = jsonTable.data[1].Species.Tree.Alder\n  data.SpeciesTreeBirch = jsonTable.data[1].Species.Tree.Birch\n  data.SpeciesTreeCypress = jsonTable.data[1].Species.Tree.Cypress\n  data.SpeciesTreeElm = jsonTable.data[1].Species.Tree.Elm\n  data.SpeciesTreeHazel = jsonTable.data[1].Species.Tree.Hazel\n  data.SpeciesTreeOak = jsonTable.data[1].Species.Tree.Oak\n  data.SpeciesTreePine = jsonTable.data[1].Species.Tree.Pine\n  data.SpeciesTreePlane = jsonTable.data[1].Species.Tree.Plane\n  data.SpeciesTreePoplarCottonwood = jsonTable.data[1].Species.Tree.PoplarCottonwood\n  data.SpeciesWeedChenopod = jsonTable.data[1].Species.Weed.Chenopod\n  data.SpeciesWeedMugwort = jsonTable.data[1].Species.Weed.Mugwort\n  data.SpeciesWeedNettle = jsonTable.data[1].Species.Weed.Nettle\n  data.SpeciesWeedRagweed = jsonTable.data[1].Species.Weed.Ragweed\n  data.SpeciesOthers = jsonTable.data[1].Species.Others\n  local updatedAt = jsonTable.data[1].updatedAt\n  \n    -- Check timezone and daylight saving time\n  local timezone = os.difftime(os.time(), os.time(os.date(\"!*t\",os.time())))/3600\n  if os.date(\"*t\").isdst then -- Check daylight saving time \n    timezone = timezone + 1\n  end\n  self:logging(3,\"Timezone + dst: \" ..timezone)\n\n  -- Convert time of measurement to local timezone\n  local pattern = \"(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)\"\n  updatedAt = updatedAt:gsub(\"%.000Z\", \"\") -- Clean up date/time\n  updatedAt = updatedAt:gsub(\"%T\", \" \") -- Clean up date/time\n  local runyear, runmonth, runday, runhour, runminute, runseconds = updatedAt:match(pattern)\n  local convertedTimestamp = os.time({year = runyear, month = runmonth, day = runday, hour = runhour, min = runminute, sec = runseconds})\n  data.timestamp = os.date(\"%d-%m-%Y %X\", convertedTimestamp + (timezone*3600))\nend\n\n\nfunction QuickApp:simData() -- Simulate Ambee API\n  self:logging(3,\"Simulation mode\")\n  local apiResult = '{\"message\": \"Success\",\"lat\": 52.10,\"lng\": 5.17,\"data\": [{\"Count\": {\"grass_pollen\": 23,\"tree_pollen\": 172,\"weed_pollen\": 1},\"Risk\": {\"grass_pollen\": \"Low\",\"tree_pollen\": \"Moderate\",\"weed_pollen\": \"Low\"},\"Species\": {\"Grass\": {\"Grass / Poaceae\": 23},\"Others\": 4,\"Tree\": {\"Alder\": 3,\"Birch\": 61,\"Cypress\": 6,\"Elm\": 1,\"Hazel\": 0,\"Oak\": 44,\"Pine\": 29,\"Plane\": 20,\"Poplar / Cottonwood\": 5},\"Weed\": {\"Chenopod\": 0,\"Mugwort\": 0,\"Nettle\": 0,\"Ragweed\": 0}},\"updatedAt\": \"2021-05-08T11:14:38.000Z\"}]}'\n  \n  self:logging(3,\"apiResult: \" ..apiResult)\n  apiResult = apiResult:gsub(\"% / \", \"\") -- Clean up the apiResult by removing /\n  self:logging(3,\"apiResult editted: \" ..apiResult)\n\n  jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table \n  \n  self:getValues()\n  self:updateLabels()\n  self:updateProperties()\n\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data) \n  end\n  \n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:getData()\n  self:logging(3,\"Start getData\")\n  self:logging(2,\"URL: \" ..address)\n    \n  http:request(address, {\n    options = {data = Method, method = \"GET\", headers = {[\"x-api-key\"] = apiKey,[\"Content-Type\"] = \"application/json\",[\"Accept\"] = \"application/json\",}},\n    \n      success = function(response)\n        self:logging(3,\"response status: \" ..response.status)\n        self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n        self:logging(2,\"Response data: \" ..response.data)\n\n        if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n          self:warning(\"Temporarily no data from Ambee\")\n          self:warning(response.data)\n          return\n          --self:logging(3,\"No data SetTimeout \" ..interval ..\" seconds\")\n          --fibaro.setTimeout(interval*1000, function() \n          --  self:getdata()\n          --end)\n        end\n\n        response.data = response.data:gsub(\"% / \", \"\") -- Clean up the response.data by removing /\n        self:logging(2,\"Response data editted: \" ..response.data)\n\n        jsonTable = json.decode(response.data) -- JSON decode from api to lua-table\n\n        self:getValues()\n        self:updateLabels()\n        self:updateProperties()\n\n        for id,child in pairs(self.childDevices) do \n          child:updateValue(data) \n        end\n      \n      end,\n      error = function(error)\n        self:error('error: ' ..json.encode(error))\n        self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n      end\n    }) \n\n  self:logging(3,\"SetTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout((interval)*1000, function() \n     self:getData()\n  end)\nend\n\n\nfunction QuickApp:createVariables() -- Get all Quickapp Variables or create them\n  data = {}\n  data.CountGrassPollen = \"0\"\n  data.CountTreePollen = \"0\"\n  data.CountWeedPollen = \"0\"\n  data.RiskGrassPollen = \"n/a\"\n  data.RiskTreePollen = \"n/a\"\n  data.RiskWeedPollen = \"n/a\"\n  data.SpeciesGrassPoaceae = \"0\"\n  data.SpeciesTreeAlder = \"0\"\n  data.SpeciesTreeBirch = \"0\"\n  data.SpeciesTreeCypress = \"0\"\n  data.SpeciesTreeElm = \"0\"\n  data.SpeciesTreeHazel = \"0\"\n  data.SpeciesTreeOak = \"0\"\n  data.SpeciesTreePine = \"0\"\n  data.SpeciesTreePlane = \"0\"\n  data.SpeciesTreePoplarCottonwood = \"0\"\n  data.SpeciesWeedChenopod = \"0\"\n  data.SpeciesWeedMugwort = \"0\"\n  data.SpeciesWeedNettle = \"0\"\n  data.SpeciesWeedRagweed = \"0\"\n  data.SpeciesOthers = \"0\"\n  data.timestamp = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all variables \n  apiKey = self:getVariable(\"apiKey\")\n  latitude = tonumber(self:getVariable(\"latitude\"))\n  longitude = tonumber(self:getVariable(\"longitude\"))\n  interval = tonumber(self:getVariable(\"interval\")) \n  httpTimeout = tonumber(self:getVariable(\"httpTimeout\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n  local icon = tonumber(self:getVariable(\"icon\")) \n\n  if apiKey ==\"\" or apiKey == nil then\n    apiKey = \"\" \n    self:setVariable(\"apiKey\",apiKey)\n    self:trace(\"Added QuickApp variable apiKey\")\n  end\n  if latitude == 0 or latitude == nil then \n    latitude = string.format(\"%.2f\",api.get(\"/settings/location\")[\"latitude\"]) -- Default latitude of your HC3\n    self:setVariable(\"latitude\", latitude)\n    self:trace(\"Added QuickApp variable latitude with default value \" ..latitude)\n  end  \n  if longitude == 0 or longitude == nil then\n    longitude = string.format(\"%.2f\",api.get(\"/settings/location\")[\"longitude\"]) -- Default longitude of your HC3\n    self:setVariable(\"longitude\", longitude)\n    self:trace(\"Added QuickApp variable longitude with default value \" ..longitude)\n  end\n  if interval == \"\" or interval == nil then\n    interval = \"1200\" -- Free account includes up to 100 calls a day, so default value is 1200 (every 20 minutes)\n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end  \n  if httpTimeout == \"\" or httpTimeout == nil then\n    httpTimeout = \"5\" -- timeoout in seconds\n    self:setVariable(\"httpTimeout\",httpTimeout)\n    self:trace(\"Added QuickApp variable httpTimeout\")\n    httpTimeout = tonumber(httpTimeout)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default value for debugLevel response in seconds\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if icon == \"\" or icon == nil then \n    icon = \"0\" -- Default icon\n    self:setVariable(\"icon\",icon)\n    self:trace(\"Added QuickApp variable icon\")\n    icon = tonumber(icon)\n  end\n  if icon ~= 0 then \n    self:updateProperty(\"deviceIcon\", icon) -- set user defined icon \n  end\n  latitude = string.format(\"%.2f\",latitude) -- double check, to prevent 404 response\n  longitude = string.format(\"%.2f\",longitude) -- double check, to prevent 404 response\n\n  address = \"https://api.ambeedata.com/latest/pollen/by-lat-lng\" ..\"?lat=\" ..latitude ..\"&lng=\" ..longitude -- Combine webaddress and location info (current measurement)\n\n  if apiKey == nil or apiKey == \"\"  then -- Check mandatory API key \n    self:error(\"API key is empty! Get your free API key from https://www.getambee.com\")\n    self:warning(\"No API Key: Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty API key\n  end\n\nend\n\n\nfunction QuickApp:setupChildDevices()\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all my children \n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs==0 then -- No children, create children\n    local initChildData = { \n      {className=\"CountGrassPollen\", name=\"Grass Pollen\", type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"CountTreePollen\", name=\"Tree Pollen\", type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"CountWeedPollen\", name=\"Weed Pollen\", type=\"com.fibaro.multilevelSensor\", value=0},\n    }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {}, \n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\") \n  \n  self:setupChildDevices() -- Setup the Child Devices\n  self:getQuickAppVariables() -- Get Quickapp Variables or create them\n  self:createVariables() -- Create Variables\n\n  http = net.HTTPClient({timeout=httpTimeout*1000})\n\n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getData() -- Get data from API\n  end\nend\n\n--EOF"}]}